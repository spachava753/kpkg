name: sign binaries and create a prerelease

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]-rc[0-9]+'

jobs:
  build:
    name: Build the binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: dragonfly
            arch: amd64
          - os: freebsd
            arch: 386
          - os: freebsd
            arch: amd64
          - os: freebsd
            arch: arm
          - os: freebsd
            arch: arm64
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: linux
            arch: mips
          - os: linux
            arch: mips64
          - os: linux
            arch: mips64le
          - os: linux
            arch: mipsle
          - os: linux
            arch: ppc64
          - os: linux
            arch: ppc64le
          - os: linux
            arch: riscv64
          - os: linux
            arch: s390x
          - os: netbsd
            arch: 386
          - os: netbsd
            arch: amd64
          - os: netbsd
            arch: arm
          - os: netbsd
            arch: arm64
          - os: openbsd
            arch: 386
          - os: openbsd
            arch: amd64
          - os: openbsd
            arch: arm
          - os: openbsd
            arch: arm64
          - os: solaris
            arch: amd64
          - os: windows
            arch: 386
          - os: windows
            arch: amd64
          - os: windows
            arch: arm
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15' # The Go version to download (if necessary) and use.

      - name: print matrix strat for debugging
        run: echo ${{ matrix.platform.os }}/${{ matrix.platform.arch }}

      - name: Build
        run: |
          GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} go build -o kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}

      - name: upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}

  prerelease:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: release/

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          make sign

      - name: Zip up release directories
        run: |
          cd release/linux && zip -r kpkg_linux_amd64.zip . && cd -
          cd release/windows && zip -r kpkg_windows_amd64.zip . && cd -

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload linux release binaries
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/linux/kpkg_linux_amd64.zip
          asset_name: kpkg_linux_amd64.zip
          asset_content_type: application/zip

      - name: Upload darwin release binaries
        id: upload-darwin-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/darwin/kpkg.zip
          asset_name: kpkg_darwin_amd64.zip
          asset_content_type: application/zip

      - name: Upload windows release binaries
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows/kpkg_windows_amd64.zip
          asset_name: kpkg_windows_amd64.zip
          asset_content_type: application/zip