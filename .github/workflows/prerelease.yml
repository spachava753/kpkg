name: sign binaries and create a prerelease

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]-rc[0-9]+'
  workflow_dispatch: { }

jobs:
  build:
    name: Build the binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: darwin
            arch: amd64
          - os: dragonfly
            arch: amd64
#          - os: freebsd
#            arch: 386
#          - os: freebsd
#            arch: amd64
#          - os: freebsd
#            arch: arm
#          - os: freebsd
#            arch: arm64
#          - os: linux
#            arch: 386
#          - os: linux
#            arch: amd64
#          - os: linux
#            arch: arm
#          - os: linux
#            arch: arm64
#          - os: linux
#            arch: mips
#          - os: linux
#            arch: mips64
#          - os: linux
#            arch: mips64le
#          - os: linux
#            arch: mipsle
#          - os: linux
#            arch: ppc64
#          - os: linux
#            arch: ppc64le
#          - os: linux
#            arch: riscv64
#          - os: linux
#            arch: s390x
#          - os: netbsd
#            arch: 386
#          - os: netbsd
#            arch: amd64
#          - os: netbsd
#            arch: arm
#          - os: netbsd
#            arch: arm64
#          - os: openbsd
#            arch: 386
#          - os: openbsd
#            arch: amd64
#          - os: openbsd
#            arch: arm
#          - os: openbsd
#            arch: arm64
#          - os: solaris
#            arch: amd64
#          - os: windows
#            arch: 386
#          - os: windows
#            arch: amd64
#          - os: windows
#            arch: arm
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'

      - name: Set binary name
        if: matrix.platform.os != 'windows'
        run: echo "binary_name=kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}" >> $GITHUB_ENV

      - name: Set binary name for windows
        if: matrix.platform.os == 'windows'
        run: echo "binary_name=kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.exe" >> $GITHUB_ENV

      - name: Build
        run: GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} go build -o ${{ env.binary_name }}

      - name: upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.binary_name }}
          path: ${{ env.binary_name }}

  zip:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          # ignore darwin, we are going to set up a job to notarize and zip
          #          - os: darwin
          #            arch: amd64
          - os: dragonfly
            arch: amd64
#          - os: freebsd
#            arch: 386
#          - os: freebsd
#            arch: amd64
#          - os: freebsd
#            arch: arm
#          - os: freebsd
#            arch: arm64
#          - os: linux
#            arch: 386
#          - os: linux
#            arch: amd64
#          - os: linux
#            arch: arm
#          - os: linux
#            arch: arm64
#          - os: linux
#            arch: mips
#          - os: linux
#            arch: mips64
#          - os: linux
#            arch: mips64le
#          - os: linux
#            arch: mipsle
#          - os: linux
#            arch: ppc64
#          - os: linux
#            arch: ppc64le
#          - os: linux
#            arch: riscv64
#          - os: linux
#            arch: s390x
#          - os: netbsd
#            arch: 386
#          - os: netbsd
#            arch: amd64
#          - os: netbsd
#            arch: arm
#          - os: netbsd
#            arch: arm64
#          - os: openbsd
#            arch: 386
#          - os: openbsd
#            arch: amd64
#          - os: openbsd
#            arch: arm
#          - os: openbsd
#            arch: arm64
#          - os: solaris
#            arch: amd64
#          - os: windows
#            arch: 386
#          - os: windows
#            arch: amd64
#          - os: windows
#            arch: arm
    steps:
      - name: Set binary name
        if: matrix.platform.os != 'windows'
        run: echo "binary_name=kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}" >> $GITHUB_ENV

      - name: Set binary name for windows
        if: matrix.platform.os == 'windows'
        run: echo "binary_name=kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.exe" >> $GITHUB_ENV

      - name: download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.binary_name }}

      - run: pwd
      - run: ls -la ${{ env.binary_name }}

      - name: zip binary
        run: zip -r kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.zip .

      - name: upload zipped artifacts
        uses: actions/upload-artifact@v2
        with:
          name: kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.zip
          path: kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.zip

  notorize:
    needs: build
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: kpkg_darwin_amd64

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: gon -log-level=debug -log-json ./gon.hcl

      - name: upload notorized artifacts
        uses: actions/upload-artifact@v2
        with:
          name: kpkg_darwin_amd64.zip
          path: kpkg_darwin_amd64.zip

  create-prerelease:
    needs: [notorize, zip]
    runs-on: ubuntu-latest
    outputs:
      release-url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Prerelease
        id: create_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: true

  upload-artifacts:
    needs: create-prerelease
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - os: darwin
            arch: amd64
          - os: dragonfly
            arch: amd64
#          - os: freebsd
#            arch: 386
#          - os: freebsd
#            arch: amd64
#          - os: freebsd
#            arch: arm
#          - os: freebsd
#            arch: arm64
#          - os: linux
#            arch: 386
#          - os: linux
#            arch: amd64
#          - os: linux
#            arch: arm
#          - os: linux
#            arch: arm64
#          - os: linux
#            arch: mips
#          - os: linux
#            arch: mips64
#          - os: linux
#            arch: mips64le
#          - os: linux
#            arch: mipsle
#          - os: linux
#            arch: ppc64
#          - os: linux
#            arch: ppc64le
#          - os: linux
#            arch: riscv64
#          - os: linux
#            arch: s390x
#          - os: netbsd
#            arch: 386
#          - os: netbsd
#            arch: amd64
#          - os: netbsd
#            arch: arm
#          - os: netbsd
#            arch: arm64
#          - os: openbsd
#            arch: 386
#          - os: openbsd
#            arch: amd64
#          - os: openbsd
#            arch: arm
#          - os: openbsd
#            arch: arm64
#          - os: solaris
#            arch: amd64
#          - os: windows
#            arch: 386
#          - os: windows
#            arch: amd64
#          - os: windows
#            arch: arm
    steps:
      - name: Set asset name
        run: echo "artifact_name=kpkg_${{ matrix.platform.os }}_${{ matrix.platform.arch }}.zip" >> $GITHUB_ENV

      - name: download assets
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.artifact_name }}

      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-prerelease.outputs.release-url }}
          asset_path: ${{ env.artifact_name }}
          asset_name: ${{ env.artifact_name }}
          asset_content_type: application/zip